/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.solace.ep.asyncapi.rest.utils;

import java.nio.charset.StandardCharsets;
import java.util.Base64;
import java.util.regex.Pattern;

import com.solace.ep.asyncapi.rest.models.AsyncApiImportRequest;

import lombok.extern.slf4j.Slf4j;

/**
 * Static functions used to validate input for HTTP/POST import operation
 */
@Slf4j
public class ValidationUtils {

    // Pattern for character set valid for Base64 encoded strings
    private static final Pattern BASE64_PATTERN = Pattern.compile("^[A-Za-z0-9+/=]*$");

    public static final String
                URL_US = "https://api.solace.cloud",
                URL_AU = "https://api.solacecloud.com.au",
                URL_EU = "https://api.solacecloud.eu",
                URL_SG = "https://api.solacecloud.sg";

    public static final String
                TOKEN_PERMISSIONS_PATH = "/api/v0/token/permissions";
    
    /**
     * Test if a string looks like it is base64 encoded
     * Generated by ChatGpt
     * @param str
     * @return
     */
    public static boolean isBase64(String str) {
        // Check if the string is null or empty
        if (str == null || str.isEmpty()) {
            return false;
        }

        // Check if the string has a length that is a multiple of 4 (Base64 padding)
        if (str.length() % 4 != 0) {
            return false;
        }

        // Check if the string contains only valid Base64 characters
        if (!BASE64_PATTERN.matcher(str).matches()) {
            return false;
        }

        try {
            // Attempt to decode the string (ignore padding and invalid characters)
            byte[] decoded = Base64.getDecoder().decode(str);

            // Check if the decoded string matches its Base64-encoded representation (optional step)
            String encodedAgain = Base64.getEncoder().encodeToString(decoded);
            return encodedAgain.equals(str);
        } catch (IllegalArgumentException e) {
            // If decoding fails (invalid Base64 data), return false
            return false;
        }
    }

    public static String decodeBase64(String base64ToDecode ) throws Exception
    {
        return new String(Base64.getDecoder().decode(base64ToDecode), StandardCharsets.UTF_8);
    }

    /**
     * Test if EP Token and AsyncApi in request body are present and contain valid Base64 encoded strings
     * @param request
     * @return
     */
    public static boolean validRequestBody(
        final AsyncApiImportRequest request
    )
    {
        boolean isValid = true;
        if (!isBase64(request.getEpToken()))
        {
            log.error("EP Token must be present and Base64 encoded");
            isValid = false;
        }
        if (!isBase64(request.getAsyncApiSpec()))
        {
            log.error("AsyncApi spec must be present and Base64 encoded");
            isValid = false;
        }
        return isValid;
    }

    /**
     * Test if appDomainId or appDomainName are present
     * @param appDomainId
     * @param appDomainName
     * @return
     */
    public static boolean validDomainIdentifiers(
        final String appDomainId,
        final String appDomainName
    )
    {
        boolean isValid = true;
        if ((appDomainId == null || appDomainId.isBlank()) && (appDomainName == null || appDomainName.isBlank())) {
            log.error("One of 'appDomainId' or 'appDomainName' must be specified on the request");
            isValid = false;
        }
        return isValid;
    }

    /**
     * Rest if urlRegion is a valid value.
     * @param urlRegion
     * @param urlOverride
     * @return
     */
    public static boolean validRegion(
        final String urlRegion,
        final String urlOverride
    )
    {
        boolean isValid = true;
        if (urlRegion != null) {
            switch (urlRegion) {
                case "US":
                    break;
                case "EU":
                    break;
                case "AU":
                    break;
                case "SG":
                    break;
                default:
                    log.error("solaceCloudApi region must be one of: ['US', 'EU', 'AU', 'SG'] if specified; 'US' is the default");
                    isValid = false;
            }
        }
        return isValid;
    }

    /**
     * Test if newVersionStrateg is a valid value
     * @param newVersionStrategy
     * @return
     */
    public static boolean validNewVersionStrategy(
        final String newVersionStrategy
    )
    {
        boolean isValid = true;
        switch (newVersionStrategy) {
            case "MAJOR":
                break;
            case "MINOR":
                break;
            case "PATCH":
                break;
            default:
                log.error("'newVersionStrategy' must be one of: ['MAJOR', 'MINOR', 'PATCH'] if specified; 'MAJOR' is the default");
                isValid = false;
        }
        return isValid;
    }

    /**
     * Return Solace Cloud API to use based upon the region identifier
     * @param urlRegion
     * @param urlOverride
     * @return
     */
    public static String getUrlByRegion(
        final String urlRegion,
        final String urlOverride
    )
    {
        String resolvedUrl;

        if (urlOverride != null && ! urlOverride.isBlank()) {
            resolvedUrl = urlOverride;
        } else {
            switch (urlRegion) {
                case "US":
                    resolvedUrl = URL_US;
                    break;
                case "EU":
                resolvedUrl = URL_EU;
                    break;
                case "AU":
                resolvedUrl = URL_AU;
                    break;
                case "SG":
                resolvedUrl = URL_SG;
                    break;
                default:
                    resolvedUrl = URL_US;
            }
        }
        return resolvedUrl;
    }

    public static String getEpTokenValidationUrlByRegion(
        final String urlRegion,
        final String urlOverride
    )
    {
        return getUrlByRegion(urlRegion, urlOverride) + "/" + TOKEN_PERMISSIONS_PATH;
    }
}
